/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.spring.services.api;

import com.spring.services.model.Blog;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-22T10:22:25.930911300+05:30[Asia/Calcutta]")
@Validated
@Api(value = "blogs", description = "the blogs API")
public interface BlogsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /blogs/addBlog : add user details
     *
     * @param blog Blog details (required)
     * @return Success (status code 200)
     *         or Not authenticated. All activities are logged per user, so users must be authenticated before they can call this endpoint. (status code 401)
     *         or Not authorized for any data. Note this is not the case if user has a role of Administrator or Manager. (status code 403)
     *         or The origin server did not find a current representation for the target resource or is not willing to disclose that one exists. (status code 404)
     *         or The method received in the request-line is known by the origin server but not supported by the target resource. (status code 405)
     *         or The server encountered an unexpected condition that prevented it from fulfilling the request. (status code 500)
     *         or The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay (status code 503)
     *         or Unexpected ErrorResponse (status code 200)
     */
    @ApiOperation(value = "add user details", nickname = "blogsAddBlogPost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 401, message = "Not authenticated. All activities are logged per user, so users must be authenticated before they can call this endpoint."),
        @ApiResponse(code = 403, message = "Not authorized for any data. Note this is not the case if user has a role of Administrator or Manager."),
        @ApiResponse(code = 404, message = "The origin server did not find a current representation for the target resource or is not willing to disclose that one exists."),
        @ApiResponse(code = 405, message = "The method received in the request-line is known by the origin server but not supported by the target resource."),
        @ApiResponse(code = 500, message = "The server encountered an unexpected condition that prevented it from fulfilling the request."),
        @ApiResponse(code = 503, message = "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay"),
        @ApiResponse(code = 200, message = "Unexpected ErrorResponse") })
    @PostMapping(
        value = "/blogs/addBlog",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _blogsAddBlogPost(@ApiParam(value = "Blog details" ,required=true )  @Valid @RequestBody Blog blog) {
        return blogsAddBlogPost(blog);
    }

    // Override this method
    default  ResponseEntity<Void> blogsAddBlogPost(Blog blog) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /blogs/deleteById : delete blog By Id
     *
     * @param blogId Delete Blog By Id (required)
     * @return Success (status code 200)
     *         or Not authenticated. All activities are logged per user, so users must be authenticated before they can call this endpoint. (status code 401)
     *         or Not authorized for any data. Note this is not the case if user has a role of Administrator or Manager. (status code 403)
     *         or The origin server did not find a current representation for the target resource or is not willing to disclose that one exists. (status code 404)
     *         or The method received in the request-line is known by the origin server but not supported by the target resource. (status code 405)
     *         or The server encountered an unexpected condition that prevented it from fulfilling the request. (status code 500)
     *         or The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay (status code 503)
     *         or Unexpected ErrorResponse (status code 200)
     */
    @ApiOperation(value = "delete blog By Id", nickname = "blogsDeleteByIdDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 401, message = "Not authenticated. All activities are logged per user, so users must be authenticated before they can call this endpoint."),
        @ApiResponse(code = 403, message = "Not authorized for any data. Note this is not the case if user has a role of Administrator or Manager."),
        @ApiResponse(code = 404, message = "The origin server did not find a current representation for the target resource or is not willing to disclose that one exists."),
        @ApiResponse(code = 405, message = "The method received in the request-line is known by the origin server but not supported by the target resource."),
        @ApiResponse(code = 500, message = "The server encountered an unexpected condition that prevented it from fulfilling the request."),
        @ApiResponse(code = 503, message = "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay"),
        @ApiResponse(code = 200, message = "Unexpected ErrorResponse") })
    @DeleteMapping(
        value = "/blogs/deleteById"
    )
    default ResponseEntity<Void> _blogsDeleteByIdDelete(@NotNull @ApiParam(value = "Delete Blog By Id", required = true) @Valid @RequestParam(value = "blogId", required = true) Integer blogId) {
        return blogsDeleteByIdDelete(blogId);
    }

    // Override this method
    default  ResponseEntity<Void> blogsDeleteByIdDelete(Integer blogId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blogs : Get blog details
     *
     * @return Success (status code 200)
     *         or Not authenticated. All activities are logged per user, so users must be authenticated before they can call this endpoint. (status code 401)
     *         or Not authorized for any data. Note this is not the case if user has a role of Administrator or Manager. (status code 403)
     *         or The origin server did not find a current representation for the target resource or is not willing to disclose that one exists. (status code 404)
     *         or The method received in the request-line is known by the origin server but not supported by the target resource. (status code 405)
     *         or The server encountered an unexpected condition that prevented it from fulfilling the request. (status code 500)
     *         or The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay (status code 503)
     *         or Unexpected ErrorResponse (status code 200)
     */
    @ApiOperation(value = "Get blog details", nickname = "blogsGet", notes = "", response = Blog.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Blog.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Not authenticated. All activities are logged per user, so users must be authenticated before they can call this endpoint."),
        @ApiResponse(code = 403, message = "Not authorized for any data. Note this is not the case if user has a role of Administrator or Manager."),
        @ApiResponse(code = 404, message = "The origin server did not find a current representation for the target resource or is not willing to disclose that one exists."),
        @ApiResponse(code = 405, message = "The method received in the request-line is known by the origin server but not supported by the target resource."),
        @ApiResponse(code = 500, message = "The server encountered an unexpected condition that prevented it from fulfilling the request."),
        @ApiResponse(code = 503, message = "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay"),
        @ApiResponse(code = 200, message = "Unexpected ErrorResponse") })
    @GetMapping(
        value = "/blogs",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Blog>> _blogsGet() {
        return blogsGet();
    }

    // Override this method
    default  ResponseEntity<List<Blog>> blogsGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"blogbody\" : \"blogbody\", \"publishby\" : \"publishby\", \"userBlogId\" : 6, \"blogtitle\" : \"blogtitle\", \"updatedon\" : \"2021-01-30T08:30:00Z\", \"blogId\" : 0, \"isdeleted\" : \"isdeleted\", \"createdon\" : \"2021-01-30T08:30:00Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blogs/getAllBlogByUserId : Get All blog by userid
     *
     * @param userId userBlog Id (required)
     * @return Success (status code 200)
     *         or Not authenticated. All activities are logged per user, so users must be authenticated before they can call this endpoint. (status code 401)
     *         or Not authorized for any data. Note this is not the case if user has a role of Administrator or Manager. (status code 403)
     *         or The origin server did not find a current representation for the target resource or is not willing to disclose that one exists. (status code 404)
     *         or The method received in the request-line is known by the origin server but not supported by the target resource. (status code 405)
     *         or The server encountered an unexpected condition that prevented it from fulfilling the request. (status code 500)
     *         or The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay (status code 503)
     *         or Unexpected ErrorResponse (status code 200)
     */
    @ApiOperation(value = "Get All blog by userid", nickname = "blogsGetAllBlogByUserIdGet", notes = "", response = Blog.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Blog.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Not authenticated. All activities are logged per user, so users must be authenticated before they can call this endpoint."),
        @ApiResponse(code = 403, message = "Not authorized for any data. Note this is not the case if user has a role of Administrator or Manager."),
        @ApiResponse(code = 404, message = "The origin server did not find a current representation for the target resource or is not willing to disclose that one exists."),
        @ApiResponse(code = 405, message = "The method received in the request-line is known by the origin server but not supported by the target resource."),
        @ApiResponse(code = 500, message = "The server encountered an unexpected condition that prevented it from fulfilling the request."),
        @ApiResponse(code = 503, message = "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay"),
        @ApiResponse(code = 200, message = "Unexpected ErrorResponse") })
    @GetMapping(
        value = "/blogs/getAllBlogByUserId",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Blog>> _blogsGetAllBlogByUserIdGet(@NotNull @ApiParam(value = "userBlog Id", required = true) @Valid @RequestParam(value = "userId", required = true) Integer userId) {
        return blogsGetAllBlogByUserIdGet(userId);
    }

    // Override this method
    default  ResponseEntity<List<Blog>> blogsGetAllBlogByUserIdGet(Integer userId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"blogbody\" : \"blogbody\", \"publishby\" : \"publishby\", \"userBlogId\" : 6, \"blogtitle\" : \"blogtitle\", \"updatedon\" : \"2021-01-30T08:30:00Z\", \"blogId\" : 0, \"isdeleted\" : \"isdeleted\", \"createdon\" : \"2021-01-30T08:30:00Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blogs/getBlogById : Get Blog details By Id
     *
     * @param blogId blog id (required)
     * @return Success (status code 200)
     *         or Not authenticated. All activities are logged per user, so users must be authenticated before they can call this endpoint. (status code 401)
     *         or Not authorized for any data. Note this is not the case if user has a role of Administrator or Manager. (status code 403)
     *         or The origin server did not find a current representation for the target resource or is not willing to disclose that one exists. (status code 404)
     *         or The method received in the request-line is known by the origin server but not supported by the target resource. (status code 405)
     *         or The server encountered an unexpected condition that prevented it from fulfilling the request. (status code 500)
     *         or The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay (status code 503)
     *         or Unexpected ErrorResponse (status code 200)
     */
    @ApiOperation(value = "Get Blog details By Id", nickname = "blogsGetBlogByIdGet", notes = "", response = Blog.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Blog.class),
        @ApiResponse(code = 401, message = "Not authenticated. All activities are logged per user, so users must be authenticated before they can call this endpoint."),
        @ApiResponse(code = 403, message = "Not authorized for any data. Note this is not the case if user has a role of Administrator or Manager."),
        @ApiResponse(code = 404, message = "The origin server did not find a current representation for the target resource or is not willing to disclose that one exists."),
        @ApiResponse(code = 405, message = "The method received in the request-line is known by the origin server but not supported by the target resource."),
        @ApiResponse(code = 500, message = "The server encountered an unexpected condition that prevented it from fulfilling the request."),
        @ApiResponse(code = 503, message = "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay"),
        @ApiResponse(code = 200, message = "Unexpected ErrorResponse") })
    @GetMapping(
        value = "/blogs/getBlogById",
        produces = { "application/json" }
    )
    default ResponseEntity<Blog> _blogsGetBlogByIdGet(@NotNull @ApiParam(value = "blog id", required = true) @Valid @RequestParam(value = "blogId", required = true) Integer blogId) {
        return blogsGetBlogByIdGet(blogId);
    }

    // Override this method
    default  ResponseEntity<Blog> blogsGetBlogByIdGet(Integer blogId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"blogbody\" : \"blogbody\", \"publishby\" : \"publishby\", \"userBlogId\" : 6, \"blogtitle\" : \"blogtitle\", \"updatedon\" : \"2021-01-30T08:30:00Z\", \"blogId\" : 0, \"isdeleted\" : \"isdeleted\", \"createdon\" : \"2021-01-30T08:30:00Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /blogs/UpdateBlog : update Blog details
     *
     * @param blog Blog details (required)
     * @return Success (status code 200)
     *         or Not authenticated. All activities are logged per user, so users must be authenticated before they can call this endpoint. (status code 401)
     *         or Not authorized for any data. Note this is not the case if user has a role of Administrator or Manager. (status code 403)
     *         or The origin server did not find a current representation for the target resource or is not willing to disclose that one exists. (status code 404)
     *         or The method received in the request-line is known by the origin server but not supported by the target resource. (status code 405)
     *         or The server encountered an unexpected condition that prevented it from fulfilling the request. (status code 500)
     *         or The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay (status code 503)
     *         or Unexpected ErrorResponse (status code 200)
     */
    @ApiOperation(value = "update Blog details", nickname = "blogsUpdateBlogPut", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 401, message = "Not authenticated. All activities are logged per user, so users must be authenticated before they can call this endpoint."),
        @ApiResponse(code = 403, message = "Not authorized for any data. Note this is not the case if user has a role of Administrator or Manager."),
        @ApiResponse(code = 404, message = "The origin server did not find a current representation for the target resource or is not willing to disclose that one exists."),
        @ApiResponse(code = 405, message = "The method received in the request-line is known by the origin server but not supported by the target resource."),
        @ApiResponse(code = 500, message = "The server encountered an unexpected condition that prevented it from fulfilling the request."),
        @ApiResponse(code = 503, message = "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay"),
        @ApiResponse(code = 200, message = "Unexpected ErrorResponse") })
    @PutMapping(
        value = "/blogs/UpdateBlog",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _blogsUpdateBlogPut(@ApiParam(value = "Blog details" ,required=true )  @Valid @RequestBody Blog blog) {
        return blogsUpdateBlogPut(blog);
    }

    // Override this method
    default  ResponseEntity<Void> blogsUpdateBlogPut(Blog blog) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
