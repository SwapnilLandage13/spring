/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.spring.services.api;

import com.spring.services.model.City;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-22T10:22:25.930911300+05:30[Asia/Calcutta]")
@Validated
@Api(value = "cities", description = "the cities API")
public interface CitiesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /cities/getAllCities : Get All cities
     *
     * @return Success (status code 200)
     *         or Not authenticated. All activities are logged per user, so users must be authenticated before they can call this endpoint. (status code 401)
     *         or Not authorized for any data. Note this is not the case if user has a role of Administrator or Manager. (status code 403)
     *         or The origin server did not find a current representation for the target resource or is not willing to disclose that one exists. (status code 404)
     *         or The method received in the request-line is known by the origin server but not supported by the target resource. (status code 405)
     *         or The server encountered an unexpected condition that prevented it from fulfilling the request. (status code 500)
     *         or The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay (status code 503)
     *         or Unexpected ErrorResponse (status code 200)
     */
    @ApiOperation(value = "Get All cities", nickname = "citiesGetAllCitiesGet", notes = "", response = City.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = City.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Not authenticated. All activities are logged per user, so users must be authenticated before they can call this endpoint."),
        @ApiResponse(code = 403, message = "Not authorized for any data. Note this is not the case if user has a role of Administrator or Manager."),
        @ApiResponse(code = 404, message = "The origin server did not find a current representation for the target resource or is not willing to disclose that one exists."),
        @ApiResponse(code = 405, message = "The method received in the request-line is known by the origin server but not supported by the target resource."),
        @ApiResponse(code = 500, message = "The server encountered an unexpected condition that prevented it from fulfilling the request."),
        @ApiResponse(code = 503, message = "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay"),
        @ApiResponse(code = 200, message = "Unexpected ErrorResponse") })
    @GetMapping(
        value = "/cities/getAllCities",
        produces = { "application/json" }
    )
    default ResponseEntity<List<City>> _citiesGetAllCitiesGet() {
        return citiesGetAllCitiesGet();
    }

    // Override this method
    default  ResponseEntity<List<City>> citiesGetAllCitiesGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"cityName\" : \"cityName\", \"cityId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
